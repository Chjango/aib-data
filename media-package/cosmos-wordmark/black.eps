%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13 (Build 17A365) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 1536 1536
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 1536 1536
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
320 719.84735 m
304.20102 735.84674 l
298.19986 730.24829 292.13391 725.81274 285.9978 722.54535 c
279.8671 719.28076 272.53293 717.64844 264.00067 717.64844 c
257.33301 717.64844 251.16722 718.94617 245.50063 721.54712 c
239.83405 724.14801 234.93381 727.71216 230.7999 732.24756 c
226.66599 736.78027 223.46841 742.07922 221.1991 748.14447 c
218.93245 754.20966 217.80183 760.71198 217.80183 767.64056 c
217.80183 774.57452 218.93245 781.04175 221.1991 787.04224 c
223.46841 793.03998 226.66599 798.27148 230.7999 802.73944 c
234.93381 807.20471 239.83405 810.73645 245.50063 813.3374 c
251.16722 815.93561 257.33301 817.23608 264.00067 817.23608 c
271.99866 817.23608 279.13315 815.63611 285.39877 812.43622 c
291.66708 809.23907 297.6008 805.03821 303.19724 799.83905 c
318.9989 818.03467 l
315.66641 821.23456 312.13425 824.16736 308.39969 826.83569 c
304.66785 829.5014 300.60141 831.8028 296.20035 833.73462 c
291.79932 835.66913 286.96652 837.16656 281.69931 838.2323 c
276.43207 839.30072 270.59821 839.8349 264.20035 839.8349 c
253.53369 839.8349 243.80066 837.9328 235.00127 834.13391 c
226.19917 830.33508 218.60056 825.13593 212.20001 818.5365 c
205.79948 811.93707 200.83447 804.23956 197.29961 795.43854 c
193.76474 786.6402 192 777.24017 192 767.24121 c
192 757.11005 193.79982 747.64532 197.39944 738.8443 c
200.99907 730.04865 205.96678 722.41589 212.29985 715.94867 c
218.63293 709.48413 226.13171 704.38483 234.79889 700.6507 c
243.46606 696.91663 252.93465 695.05225 263.19925 695.05225 c
269.73471 695.05225 275.70081 695.61884 281.10025 696.75201 c
286.49969 697.88519 291.46741 699.54993 296.00067 701.74884 c
300.53394 703.95044 304.7677 706.55133 308.7019 709.54889 c
312.63345 712.54913 316.40036 715.9837 320 719.84735 c
W*
192 624 1152 288 rc
187 844.8349 m
325 844.8349 l
325 690.05225 l
187 690.05225 l
h
f
Q
q
637.35278 800.19666 m
637.35278 804.85358 639.34143 808.81061 643.32135 812.06775 c
647.29858 815.33032 652.86993 816.95886 660.02997 816.95886 c
666.39569 816.95886 672.69434 815.72601 678.92584 813.26562 c
685.1601 810.8053 691.45868 807.24664 697.82172 802.59241 c
710.95032 821.14746 l
703.79291 826.86768 696.13367 831.22308 687.97797 834.21375 c
679.81952 837.20709 670.63861 838.7038 660.42719 838.7038 c
653.53278 838.7038 647.16705 837.74011 641.36493 835.81006 c
635.53058 833.88269 630.56036 831.12347 626.41406 827.53253 c
622.27045 823.9389 619.02051 819.65076 616.6347 814.66272 c
614.28113 809.67468 613.08685 804.1214 613.08685 798.00275 c
613.08685 791.48572 614.11475 785.96472 616.17041 781.44238 c
618.22614 776.92004 621.24261 773.06262 625.15546 769.87006 c
629.06555 766.67749 633.93915 764.01794 639.70642 761.88867 c
645.50854 759.7594 652.10773 757.83472 659.56573 756.10382 c
666.06561 754.50757 671.33368 752.97858 675.4129 751.51691 c
679.45721 750.05249 682.64008 748.48853 684.99365 746.82764 c
687.31238 745.16406 688.90649 743.3363 689.76794 741.34161 c
690.62946 739.34424 691.05884 737.08582 691.05884 734.55811 c
691.05884 729.10168 688.83942 724.77856 684.39789 721.58868 c
679.95374 718.39343 673.953 716.79987 666.39569 716.79987 c
657.64417 716.79987 649.81854 718.36383 642.92413 721.48914 c
636.02704 724.61438 629.19977 729.10168 622.43414 734.95654 c
607.7168 717.39746 l
616.07117 709.81714 625.15546 704.19653 634.96698 700.53827 c
644.78125 696.88007 655.05713 695.05225 665.79724 695.05225 c
673.09149 695.05225 679.78998 695.98364 685.89001 697.84375 c
691.9552 699.70923 697.19373 702.43604 701.50372 706.02704 c
705.84595 709.61798 709.22742 714.00574 711.6803 719.19293 c
714.10101 724.38019 715.32745 730.29956 715.32745 736.95117 c
715.32745 742.80334 714.3667 747.89093 712.44244 752.21411 c
710.51825 756.53723 707.66815 760.32471 703.95667 763.58722 c
700.24243 766.84436 695.53522 769.60626 689.89948 771.86743 c
684.26642 774.12592 677.76648 776.18787 670.47223 778.05066 c
663.80865 779.64691 658.33929 781.17859 653.99707 782.64026 c
649.68707 784.10193 646.3056 785.69824 643.81781 787.42908 c
641.36493 789.15729 639.67688 791.02008 638.74567 793.01471 c
637.81976 795.01208 637.35278 797.40515 637.35278 800.19666 c
W*
192 624 1152 288 rc
602.7168 843.7038 m
720.32745 843.7038 l
720.32745 690.05225 l
602.7168 690.05225 l
h
f
Q
q
909.64331 798.22009 m
909.64331 698.44562 l
933.9469 698.44562 l
933.9469 837.57269 l
907.84778 837.57269 l
865.41461 771.78485 l
822.98138 837.57269 l
796.88495 837.57269 l
796.88495 698.44562 l
821.1886 698.44562 l
821.1886 797.82324 l
864.81519 732.63074 l
865.61346 732.63074 l
909.64331 798.22009 l
W*
192 624 1152 288 rc
791.88495 842.57269 m
938.9469 842.57269 l
938.9469 693.44562 l
791.88495 693.44562 l
h
f
Q
q
1138.1428 767.24121 m
1138.1428 760.44214 1136.9794 754.01001 1134.6497 747.94208 c
1132.3226 741.87689 1129.0959 736.61298 1124.9672 732.14771 c
1120.8436 727.68243 1115.8853 724.14801 1110.0973 721.54712 c
1104.3066 718.94617 1097.953 717.64844 1091.0338 717.64844 c
1084.1121 717.64844 1077.7234 718.98126 1071.8682 721.64691 c
1066.0128 724.31531 1060.9871 727.91449 1056.7963 732.44452 c
1052.6055 736.97992 1049.3439 742.27893 1047.014 748.34412 c
1044.687 754.4093 1043.5209 760.84418 1043.5209 767.64056 c
1043.5209 774.44232 1044.687 780.87445 1047.014 786.9397 c
1049.3439 793.00757 1052.5704 798.27148 1056.6967 802.73944 c
1060.8228 807.20471 1065.7812 810.73645 1071.5692 813.3374 c
1077.3572 815.93561 1083.7134 817.23608 1090.6326 817.23608 c
1097.5544 817.23608 1103.943 815.9032 1109.7983 813.23486 c
1115.6509 810.56921 1120.6766 806.96997 1124.8674 802.43726 c
1129.061 797.90723 1132.3226 792.60559 1134.6497 786.54034 c
1136.9794 780.47516 1138.1428 774.04034 1138.1428 767.24121 c
h
1163.8938 767.64056 m
1163.8938 777.50732 1162.0974 786.83984 1158.5044 795.64087 c
1154.9142 804.43652 1149.9208 812.10437 1143.5349 818.63635 c
1137.1464 825.17102 1129.4946 830.33508 1120.5743 834.13391 c
1111.6594 837.9328 1101.8126 839.8349 1091.0338 839.8349 c
1080.2524 839.8349 1070.4056 837.90039 1061.488 834.03412 c
1052.5704 830.16779 1044.8513 824.93628 1038.3308 818.33685 c
1031.8075 811.73743 1026.7549 804.03723 1023.1592 795.23889 c
1019.5663 786.44055 1017.7699 777.10797 1017.7699 767.24121 c
1017.7699 757.3772 1019.5663 748.0473 1023.1592 739.24628 c
1026.7549 730.44525 1031.7429 722.78009 1038.1315 716.24811 c
1044.5173 709.71619 1052.1718 704.54938 1061.0895 700.75055 c
1070.0044 696.95172 1079.8512 695.05225 1090.6326 695.05225 c
1101.4113 695.05225 1111.2607 696.98676 1120.1757 700.8504 c
1129.0959 704.71667 1136.8124 709.94818 1143.3356 716.55029 c
1149.8562 723.14703 1154.9142 730.84729 1158.5044 739.64563 c
1162.0974 748.44397 1163.8938 757.77649 1163.8938 767.64056 c
1163.8938 767.64056 l
h
W*
192 624 1152 288 rc
1012.7699 844.8349 m
1168.8938 844.8349 l
1168.8938 690.05225 l
1012.7699 690.05225 l
h
f
Q
q
1266.0254 800.19666 m
1266.0254 804.85358 1268.014 808.81061 1271.9912 812.06775 c
1275.9712 815.33032 1281.5398 816.95886 1288.7025 816.95886 c
1295.0656 816.95886 1301.3669 815.72601 1307.5984 813.26562 c
1313.83 810.8053 1320.1312 807.24664 1326.4969 802.59241 c
1339.6229 821.14746 l
1332.4628 826.86768 1324.8036 831.22308 1316.6478 834.21375 c
1308.4948 837.20709 1299.3112 838.7038 1289.0997 838.7038 c
1282.2053 838.7038 1275.8396 837.74011 1270.0375 835.81006 c
1264.2031 833.88269 1259.2329 831.12347 1255.0867 827.53253 c
1250.943 823.9389 1247.6958 819.65076 1245.3046 814.66272 c
1242.9537 809.67468 1241.7594 804.1214 1241.7594 798.00275 c
1241.7594 791.48572 1242.7874 785.96472 1244.843 781.44238 c
1246.8987 776.92004 1249.9152 773.06262 1253.8253 769.87006 c
1257.7382 766.67749 1262.6117 764.01794 1268.3817 761.88867 c
1274.1812 759.7594 1280.7803 757.83472 1288.2383 756.10382 c
1294.7355 754.50757 1300.0062 752.97858 1304.0854 751.51691 c
1308.1271 750.05249 1311.3126 748.48853 1313.6663 746.82764 c
1315.985 745.16406 1317.5791 743.3363 1318.4406 741.34161 c
1319.302 739.34424 1319.7341 737.08582 1319.7341 734.55811 c
1319.7341 729.10168 1317.5093 724.77856 1313.0704 721.58868 c
1308.6262 718.39343 1302.6255 716.79987 1295.0656 716.79987 c
1286.3141 716.79987 1278.4884 718.36383 1271.5967 721.48914 c
1264.7023 724.61438 1257.8723 729.10168 1251.1067 734.95654 c
1236.3894 717.39746 l
1244.741 709.81714 1253.8253 704.19653 1263.6395 700.53827 c
1273.4512 696.88007 1283.7271 695.05225 1294.4698 695.05225 c
1301.764 695.05225 1308.4598 695.98364 1314.5626 697.84375 c
1320.6277 699.70923 1325.8663 702.43604 1330.1763 706.02704 c
1334.5186 709.61798 1337.9 714.00574 1340.3529 719.19293 c
1342.7709 724.38019 1344 730.29956 1344 736.95117 c
1344 742.80334 1343.0365 747.89093 1341.115 752.21411 c
1339.1908 756.53723 1336.3407 760.32471 1332.6265 763.58722 c
1328.9149 766.84436 1324.2078 769.60626 1318.572 771.86743 c
1312.9363 774.12592 1306.4364 776.18787 1299.1448 778.05066 c
1292.4812 779.64691 1287.0118 781.17859 1282.6697 782.64026 c
1278.3596 784.10193 1274.9781 785.69824 1272.4904 787.42908 c
1270.0375 789.15729 1268.3468 791.02008 1267.4182 793.01471 c
1266.4923 795.01208 1266.0254 797.40515 1266.0254 800.19666 c
W*
192 624 1152 288 rc
1231.3894 843.7038 m
1349 843.7038 l
1349 690.05225 l
1231.3894 690.05225 l
h
f
Q
q
486.72018 809.72089 m
420.12689 743.22064 l
419.26822 744.8844 418.49301 746.6181 417.79855 748.41626 c
415.4729 754.45856 414.31006 760.86908 414.31006 767.63983 c
414.31006 774.41589 415.4729 780.82373 417.79855 786.86603 c
420.12689 792.91101 423.35156 798.15503 427.47528 802.60614 c
431.59903 807.0545 436.55447 810.57294 442.33899 813.164 c
448.12622 815.75238 454.47598 817.04797 461.39105 817.04797 c
468.30878 817.04797 474.69354 815.72015 480.54266 813.06189 c
482.71759 812.07544 484.77676 810.96265 486.72018 809.72089 c
h
480.84415 721.72052 m
475.05695 719.12939 468.70715 717.83655 461.79211 717.83655 c
454.87436 717.83655 448.48959 719.16437 442.63779 721.81995 c
440.46558 722.80908 438.4064 723.92181 436.46567 725.16632 c
503.05627 791.66119 l
503.91492 790.00006 504.69016 788.2691 505.38461 786.4682 c
507.71027 780.4259 508.87308 774.01538 508.87308 767.242 c
508.87308 760.46863 507.71027 754.06079 505.38461 748.01575 c
503.05627 741.97345 499.83157 736.72949 495.70786 732.28107 c
491.58414 727.8327 486.63135 724.31158 480.84415 721.72052 c
h
490.91928 701.10193 m
499.83157 704.95367 507.54605 710.16541 514.06274 716.74255 c
520.57941 723.31439 525.63177 730.98553 529.22253 739.75061 c
532.81598 748.51575 534.61139 757.81299 534.61139 767.63983 c
534.61139 777.4693 532.81598 786.7666 529.22253 795.53436 c
527.09338 800.73267 524.47162 805.5332 521.35999 809.9386 c
564.67255 853.18884 l
547.46167 870.375 l
504.01721 826.99304 l
500.11691 829.64862 495.88281 831.94403 491.31766 833.88202 c
482.40533 837.6665 472.56439 839.5614 461.79211 839.5614 c
451.01712 839.5614 441.17618 837.63422 432.26389 833.78253 c
423.35156 829.93085 415.63708 824.71912 409.12042 818.14459 c
402.60376 811.57013 397.54868 803.89899 393.95792 795.13385 c
390.36716 786.36877 388.57178 777.07147 388.57178 767.242 c
388.57178 757.41522 390.36716 748.12061 393.95792 739.35284 c
396.08978 734.15179 398.71152 729.35132 401.82315 724.94324 c
358.51328 681.6983 l
375.72418 664.51221 l
419.16592 707.89148 l
423.06625 705.2359 427.30032 702.94043 431.86551 701.0025 c
440.7778 697.21802 450.61874 695.32574 461.39105 695.32574 c
472.16602 695.32574 482.00696 697.25293 490.91928 701.10193 c
490.91928 701.10193 l
h
W*
192 624 1152 288 rc
353.51328 875.375 m
569.67255 875.375 l
569.67255 659.51221 l
353.51328 659.51221 l
h
f
ep
end
%%Trailer
%%EOF
